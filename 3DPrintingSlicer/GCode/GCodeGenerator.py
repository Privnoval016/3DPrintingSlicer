import shapely as sp

class GCodeGenerator:
    def __init__(self, infill_slice_info):
        self.infill_slice_info = infill_slice_info  # List of shapely Polygon objects representing infill perimeters
                                                    # List of vertices (x, y, z) and edges (start_idx, end_idx) for infill
                                                    # z0 corresponds to the layer height



    def generate_gcode(self, output_file):
        with open(output_file, 'w') as f:
            self.g_code_setup(f)
            for infill_slice in self.infill_slice_info:
                self.g_code_for_slice(infill_slice, f)
            self.g_code_conclusion(f)


    def g_code_setup(self, f):
        f.write("; --------------------------------\n")
        f.write("; G-code generated by Pranav Sukesh and Neel Poluri's G-Code Generator\n")
        f.write("; --------------------------------\n")
        f.write("G21 ; Set units to millimeters\n")
        f.write("G90 ; Use absolute coordinates\n")
        f.write("M82 ; Use absolute distances for extrusion\n")
        f.write("G28 ; Home all axes\n")
        f.write("G1 Z5 F5000 ; Lift nozzle\n")
        f.write("G92 E0 ; Reset extrusion distance\n")
        f.write("M104 S200 ; Set extruder temperature\n")
        f.write("M140 S60 ; Set bed temperature\n")
        f.write("M109 S200 ; Wait for extruder temperature\n")
        f.write("M190 S60 ; Wait for bed temperature\n")
        f.write("G1 F1500 ; Set initial feedrate\n")
        f.write("\n")

    def g_code_conclusion(self, f):
        f.write("\n")
        f.write("; End of print\n")
        f.write("G1 E-1 F3000 ; Retract filament\n")
        f.write("G1 Z10 F5000 ; Lift nozzle\n")
        f.write("G28 X0 Y0 ; Home X and Y axes\n")
        f.write("M104 S0 ; Turn off extruder\n")
        f.write("M140 S0 ; Turn off bed\n")
        f.write("M84 ; Disable motors\n")

        f.write("; Finished G-code generation\n")
        f.write("; --------------------------------\n")

    def g_code_for_slice(self, infill_slice, f):
        f.write(f"; LAYER Z={infill_slice.z0:.2f} mm\n")
        f.write(f"G1 Z{infill_slice.z0:.2f} F1000 ; Move to layer height\n")

        f.write("G92 E0 ; Reset extrusion distance\n")

        f.write("G1 F1500 ; Set feedrate\n")

        extrusion_per_mm = 0.05
        total_extrusion = 0.0

        f.write(f"; Beginning perimeters\n")

        for polygon in infill_slice.perimeters:
            if not polygon.is_valid or polygon.is_empty:
                continue

            f.write(f"; New perimeter\n")

            exterior_coords = list(polygon.exterior.coords)
            f.write(f"G1 X{exterior_coords[0][0]:.2f} Y{exterior_coords[0][1]:.2f} F3000 ; Move to start of perimeter\n")
            f.write("G1 E0 ; Start extrusion\n")

            for i in range(1, len(exterior_coords)):
                x, y = exterior_coords[i]
                prev_x, prev_y = exterior_coords[i - 1]
                distance = ((x - prev_x) ** 2 + (y - prev_y) ** 2) ** 0.5
                extrusion_amount = distance * extrusion_per_mm
                total_extrusion += extrusion_amount
                f.write(f"G1 X{x:.2f} Y{y:.2f} E{total_extrusion:.5f} F1500 ; Extrude\n")

            prev_x, prev_y = exterior_coords[-1]
            x, y = exterior_coords[0]
            distance = ((x - prev_x) ** 2 + (y - prev_y) ** 2) ** 0.5
            extrusion_amount = distance * extrusion_per_mm
            total_extrusion += extrusion_amount
            f.write(f"G1 X{x:.2f} Y{y:.2f} E{total_extrusion:.5f} F1500 ; Close perimeter\n")

            f.write(f"G1 E-1 F3000 ; Retract filament\n")

        f.write(f"; End of perimeters, beginning infill\n")

        for edge in infill_slice.infill_edges:
            start_vertex = infill_slice.vertices[edge[0]]
            end_vertex = infill_slice.vertices[edge[1]]

            x1, y1 = start_vertex[0], start_vertex[1]
            x2, y2 = end_vertex[0], end_vertex[1]

            f.write(f"G1 X{x1:.2f} Y{y1:.2f} F3000 ; Move to start of infill line\n")
            f.write("G1 E0 ; Start extrusion\n")

            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
            extrusion_amount = distance * extrusion_per_mm
            total_extrusion += extrusion_amount
            f.write(f"G1 X{x2:.2f} Y{y2:.2f} E{total_extrusion:.5f} F1500 ; Extrude infill line\n")

            f.write(f"G1 E-1 F3000 ; Retract filament\n")


        f.write("; Finished infill.\n")


        f.write(f"; End of layer Z={infill_slice.z0:.2f} mm\n\n")











